using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using System.Xml;
using System.Text.RegularExpressions;

namespace Dynamic.Script_8DA842C31461B7D
{
	// Script generated by Pega Robot Studio 19.1.109.0
	// Please use caution when modifying class name, namespace or attributes
	[OpenSpan.TypeManagement.DynamicTypeAttribute()]
	[OpenSpan.Design.ComponentIdentityAttribute("Script-8DA842C31461B7D")]
	public sealed class Script
	{
		public bool ParseNSF(string ReportLine, out string StoreNum, out string TrailerNum, out string Amount)
		{
			StoreNum = "";
			TrailerNum = "";
			Amount = "";

			Match StoreNumber = Regex.Match(ReportLine, "^\\d{4}");
			if(StoreNumber.Length > 0){
				StoreNum = StoreNumber.Value;
			}
			else{
				return false;
			}

			Match TrailerNumber = Regex.Match(ReportLine, "(?<=NSF.+\\d+\\.\\d+ +\\d\\.\\d+ +)\\d+[A-z]+|(?<=NSF.+\\d+\\.\\d+ +\\d\\.\\d+ +)\\d+");
			if(TrailerNumber.Length > 0){
				TrailerNum = TrailerNumber.Value;
			}
			else{
				return false;
			}

			Match Amnt = Regex.Match(ReportLine, "(\\d*\\.\\d{2})(?= [A-z])");
			if(Amnt.Length > 0){
				Amount = Amnt.Value;
			}
			else{
				return false;
			}

			return true;
		}

		public bool ParseGCVariance(string ReportLine, out string StoreNum, out string StoreAmnt, out string CSAmnt, out string Diff, out string ValueName){
			StoreNum = "";
			StoreAmnt = "";
			CSAmnt = "";
			Diff = "";
			ValueName = "";

			string AllAmounts = "";

			Match StoreNumber = Regex.Match(ReportLine, "^\\d{4}");
			if(StoreNumber.Length > 0){
				StoreNum = StoreNumber.Value;
			}
			else{
				return false;
			}
			MatchCollection Amounts = Regex.Matches(ReportLine, "\\d+,\\d{3}\\.\\d{2}|\\d*\\.\\d{2}");
			if(Amounts.Count == 3){
				StoreAmnt = Amounts[0].Value;
				CSAmnt = Amounts[1].Value;
                Diff = Amounts[2].Value;
			}
			else{
				return false;
			}
			Match ValueMatch = Regex.Match(ReportLine, "Gift Cards Redeemed|Gift Cards Sold");
			if(ValueMatch.Length > 0){
				ValueName = ValueMatch.Value;
				if(ValueName == "Gift Cards Redeemed"){
					StoreNum = StoreNum + "R";
				}
				else {
					StoreNum = StoreNum + "S";
				}
			}
			else {
				return false;
			}
			return true; 
		}

		public bool ParseHouseCharges(string ReportLine, out string StoreNum, out string CSAmount, out string HCAmount, out string Variance){
			StoreNum = "";
			CSAmount = "";
			HCAmount = "";
			Variance = "";

			Match StoreNumber = Regex.Match(ReportLine, "^\\d{4}");
			if(StoreNumber.Length > 0){
				StoreNum = StoreNumber.Value;
			}
			else{
				return false;
			}
			MatchCollection Amounts = Regex.Matches(ReportLine, "((|-)\\d*\\.\\d{2}|(|-)(\\d*,\\d{3}\\.\\d{2}))");
			if(Amounts.Count == 3){
				CSAmount = Amounts[0].Value;
				HCAmount = Amounts[1].Value;
                Variance = Amounts[2].Value;
			}
			else{
				return false;
			}
			return true; 
		}

		public bool ParseOverShort(string ReportLine, out string StoreNum, out string Amount)
		{
			StoreNum = "";
			Amount = "";

			Match StoreNumber = Regex.Match(ReportLine, "^\\d{4}");
			if(StoreNumber.Length > 0){
				StoreNum = StoreNumber.Value;
			}
			else{
				return false;
			}

			Match Amnt = Regex.Match(ReportLine, "((|-)\\d*\\.\\d{2}|(|-)(\\d*,\\d{3}\\.\\d{2})|###########)");
			if(Amnt.Length > 0){
				Amount = Amnt.Value;
			}
			else{
				return false;
			}

			return true;
		}

		public bool ParseDepositVariance(string ReportLine, out string StoreNum, out string CSDeposit, out string RepDeposit, out string Variance, out string ChangePaid)
		{
			StoreNum = "";
			CSDeposit = "";
			RepDeposit = "";
			Variance = "";
			ChangePaid = "";

			Match StoreNumber = Regex.Match(ReportLine, "^\\d{4}");
			if(StoreNumber.Length > 0){
				StoreNum = StoreNumber.Value;
			}
			else{
				return false;
			}

			MatchCollection Amounts = Regex.Matches(ReportLine, "((|-)\\d*\\.\\d{2}|(|-)(\\d*,\\d{3}\\.\\d{2})|###########)");
			if(Amounts.Count == 5){
				CSDeposit = Amounts[0].Value;
				RepDeposit = Amounts[1].Value;
				Variance = Amounts[4].Value;
				ChangePaid = Amounts[3].Value;
			}
			else{
				return false;
			}

			return true;
		}

		public bool ParseFundsVariance(string ReportLine, out string StoreNum, out string OpeningBal, out string ClosingBal, out string Decrease, out string Increase, out string Variance)
		{
			StoreNum = "";
			OpeningBal = "";
			ClosingBal = "";
			Decrease = "";
			Increase = "";
			Variance = "";

			Match StoreNumber = Regex.Match(ReportLine, "^\\d{4}");
			if(StoreNumber.Length > 0){
				StoreNum = StoreNumber.Value;
			}
			else{
				return false;
			}

			MatchCollection Amounts = Regex.Matches(ReportLine, "((|-)\\d*\\.\\d{2}|(|-)(\\d*,\\d{3}\\.\\d{2})|#+)");
			if(Amounts.Count == 6){
				OpeningBal = Amounts[0].Value;
				ClosingBal = Amounts[1].Value;
                Decrease = Amounts[3].Value;
				Increase = Amounts[4].Value;
				Variance = Amounts[5].Value;
			}
			else{
				return false;
			}

			return true;
		}

		public bool ParseDeptSale(string ReportLine, out string Dept, out string Percentage, out string Amount)
		{
			Dept = "";
			Percentage = "";
			Amount = "";

			Match Department = Regex.Match(ReportLine, "(^[A-z].*?  )");
			if(Department.Length > 0){
				Dept = Department.Value.Trim();
			}
			else{
				return false;
			}

			MatchCollection Amnt = Regex.Matches(ReportLine, "((|-)\\d*\\.\\d{2}|(|-)(\\d*,\\d{3}\\.\\d{2}))");
			if(Amnt.Count == 5 || Amnt.Count == 6){
				Amount = Amnt[0].Value;
			}
			else{
				return false;
			}

			Match Perc = Regex.Match(ReportLine, "\\d{1,2}.\\d{2}(?= %)");
			if(Perc.Length > 0){
				Percentage = Perc.Value;
			}
			else{
				return false;
			}

			return true;
		}

		public bool ParseFinalPOS(string ReportLine, out string Category, out string Amount)
		{
			Category = "";
			Amount = "";

			Match Cat = Regex.Match(ReportLine, "(?<=  ).+(?=  )");
			if(Cat.Length > 0){
				Category = Cat.Value.Trim();
			}
			else{
				return false;
			}

			Match Amnt = Regex.Match(ReportLine, "(-|)(\\d+\\.\\d{2}|(-|)\\.\\d{2})");
			if(Amnt.Length > 0){
				Amount = Amnt.Value;
			}
			else{
				return false;
			}

			return true;
		}

		public bool ParseRxReport(string ReportLine, out string Dept, out string Amount, out string ReceivableAmount, out string Variance)
		{
			Dept = "";
			Amount = "";
			ReceivableAmount = "";
			Variance = "";

			Match Department = Regex.Match(ReportLine, "\\d{4}");
			if(Department.Length > 0){
				Dept = Department.Value.Trim();
			}
			else{
				return false;
			}

			MatchCollection Amnt = Regex.Matches(ReportLine, "((|-)\\d*\\.\\d{2}|(|-)(\\d*,\\d{3}\\.\\d{2}))");
			if(Amnt.Count == 3){
				Amount = Amnt[0].Value;
				ReceivableAmount = Amnt[1].Value;
				Variance = Amnt[2].Value;
			}
			else{
				return false;
			}

			return true;
		}

		public bool ParseEPSReport(string ReportLine, out string Store, out string EPSAmount, out string CSAmount, out string Diff)
		{
			Store = "";
			EPSAmount = "";
			CSAmount = "";
			Diff = "";

			Match StoreNum = Regex.Match(ReportLine, "^\\d{4}");
			if(StoreNum.Length > 0){
				Store = StoreNum.Value.Trim();
			}
			else{
				return false;
			}

			MatchCollection Amnt = Regex.Matches(ReportLine, "((|-)\\d*\\.\\d{2}|(|-)(\\d*,\\d{3}\\.\\d{2}))");
			if(Amnt.Count == 3){
				EPSAmount = Amnt[0].Value;
				CSAmount = Amnt[1].Value;
				Diff = Amnt[2].Value;
			}
			else{
				return false;
			}

			return true;
		}

		public bool ExecuteCommand(string command){
			try {
				System.Diagnostics.Process.Start(command);
				return true;
			}
			catch (InvalidCastException e) {
				return false;
			}

        }

		public double truncateDifference(double diff){
			double difference = Math.Truncate(diff * 100) / 100;

			return difference;
		}

		public bool PositionsIdentical(int a, int b){
			if(a == b) {
				return true;
			}
			else {
				return false;
			}

		}

		public bool ParseStoreInfo(string Line, out string StoreNum, out string OverShort, out string CashDeposits, out string ElecDeposits, out string GCRedeem, out string GCSold, out string NSF, out string RXAR, out string Sales, out string StoreFund, out string pyID, out string MemNum, out string AR){
			StoreNum = "";
			OverShort = "";
			CashDeposits = "";
			ElecDeposits = "";
			GCRedeem = "";
			GCSold = "";
			NSF = "";
			RXAR = "";
			Sales = "";
			StoreFund = "";
			pyID = "";
			MemNum = "";
			AR = "";

			MatchCollection Configurations = Regex.Matches(Line, "(?<=(StoreNumber\":))(\\d{2,3})|(?<=(CashierAndStoreOverShort\":))(\\d{1,3}\\.\\d{2}|\\d{1,3})|(?<=(CashDeposits\":))(true|false)|(?<=(ElectronicDeposits\":))(true|false)|(?<=(GCRedeem\":))(true|false)|(?<=(GCSold\":))(true|false)|(?<=(NSF\":))(true|false)|(?<=(RXAR\":))(true|false)|(?<=(Sales\":))(true|false)|(?<=(StoreFund\":))(true|false)|(?<=(MemberNumber\":))(\\d{1,3})|(?<=(ARClearing\":))(true|false)");
			if(Configurations.Count == 12){
				StoreNum = Configurations[0].Value;
				MemNum = Configurations[1].Value;
				OverShort = Configurations[2].Value;
				CashDeposits = Configurations[3].Value;
				ElecDeposits = Configurations[4].Value;
				GCRedeem = Configurations[5].Value;
				GCSold = Configurations[6].Value;
				NSF = Configurations[7].Value;
				RXAR = Configurations[8].Value;
				Sales = Configurations[9].Value;
				StoreFund = Configurations[10].Value;
				AR = Configurations[11].Value;
			}
			else{
				return false;
			}
			return true; 
		}

		public bool GetpyID(string StoreData, out string pyID){
			pyID = "";

			Match CaseID = Regex.Match(StoreData, "(?<=pyID\":\")(B-\\d{1,6})");
			if(CaseID.Length > 0){
				pyID = CaseID.Value.Trim();
			}
			else{
				return false;
			}

			return true;
		}

		public bool GetDateStamp(string StoreData, out DateTime DateStamp, out string DateStr){
			DateStamp = new DateTime();
			DateStr = "";

			Match DS = Regex.Match(StoreData, "(?<=\"DateStamp\":\")\\d{8}");
			if(DS.Length > 0){
				DateStr = DS.Value;
				string y = DS.Value.Substring(0,4);
				string m = DS.Value.Substring(4, 2);
				string d = DS.Value.Substring(6, 2);
				string DateString = m + "-" + d + "-" + y;
				DateStamp = DateTime.Parse(DateString);
			}
			else {
				return false;
			}
			return true;
		}

		public string[] SplitReport(string Report){
			string[] stringSeparators = new string[] {"\r\n"};
			string[] splitReport = Report.Split(stringSeparators, StringSplitOptions.None);

			return splitReport;
		}

		public bool CheckTrailerNum(string trailer){
            if(trailer.Length == 10){
                char first = trailer[0];
                for(int i = 1; i < 10; i++){
                    if(first != trailer[i]){
                        return true;
                    }
                }
                if(first == '5'){
                    return true;
                }
                else{
                    return false;
                }
            }
            else {
                return false;
            }

        }

		public bool VarianceDueToCoin(double Variance, double ChgPaid){
			if(Math.Abs(Variance) == Math.Abs(ChgPaid)){
				return true;
			}
			else {
				return false;
			}
		
		}

		public bool GetDRCRDifference(string Diff, out string Difference, out string Credits, out string Debits){
			Difference = "";
			Credits = "";
			Debits = "";

			Match D = Regex.Match(Diff, "(?<=Difference = +)\\d+\\.\\d{1,2}|(?<=Difference = +)\\.\\d+|(?<=Difference = +)\\d+");
			if(D.Length > 0){
				Difference = D.Value.Trim();
			}
			else {
				return false;
			}

			Match Cred = Regex.Match(Diff, "(?<=Credits = +)\\d+\\.\\d{2}|(?<=Credits = +)\\d+");
			if(Cred.Length > 0){
				Credits = Cred.Value.Trim();
			}
			else {
				return false;
			}

			Match Deb = Regex.Match(Diff, "(?<=Debits = +)\\d+\\.\\d{1,2}|(?<=Debits = +)\\d+");
			if(Deb.Length > 0){
				Debits = Deb.Value.Trim();
			}
			else {
				return false;
			}
			return true;
		}

		public bool StoreIsInRange(int lowLimit, int highLimit, int storeNum){
			if(storeNum >= lowLimit && storeNum <= highLimit){
				return true;
			}
			else {
				return false;
			}
		}

		public bool dateIsBetween(string date1, string date2, string dateComp){
			date1 = date1.ToUpper();
            date2 = date2.ToUpper();
            dateComp = dateComp.ToUpper();
            DateTime dt1 = DateTime.Parse(date1);
            DateTime dt2 = DateTime.Parse(date2);
            DateTime dtComp = DateTime.Parse(dateComp);

            if(dtComp >= dt1 && dtComp <= dt2){
                return true;
            }
            else {
                return false;
            }

        }

		public DateTime FindEndTime(DateTime dtNow){
            DateTime dtEnd = new DateTime();
            DateTime dtEleven = DateTime.Today.AddHours(11);
            DateTime dtTwo = DateTime.Today.AddHours(14);
			DateTime dtFive = DateTime.Today.AddHours(17);
            if(dtNow < dtEleven){
                dtEnd = DateTime.Today.AddHours(10).AddMinutes(50);
            } else if(dtNow > dtEleven && dtNow < dtTwo){
                dtEnd = DateTime.Today.AddHours(13).AddMinutes(50);
            } else if(dtNow > dtTwo && dtNow < dtFive){
				dtEnd = DateTime.Today.AddHours(16).AddMinutes(50);
			} else {
                dtEnd = DateTime.Today.AddDays(1);
            }
            return dtEnd;
        }

		public bool NetOverShorts(string difference, string subtract, string added, out string newSubValue, out string newAddValue){
            double sub;
            double add;
            double diff;
            newSubValue = "";
            newAddValue = "";
            bool b1 = double.TryParse(subtract, out sub);
            bool b2 = double.TryParse(added, out add);
            bool b3 = double.TryParse(difference, out diff);

            if(!b1 || !b2 || !b3){
                return false;
            }

            if(sub == diff){
                newSubValue = ".00";
                newAddValue = added;
                return true;
            } else if(sub < diff) {
                newSubValue = ".00";
                double test8 = diff - sub;
                double test9 = add + test8;
                double test10 = Math.Round(test9, 2);
                newAddValue = test10.ToString();
                //newAddValue = (add + (diff - sub)).ToString();
                return true;
            } else {
                newSubValue = Math.Round((sub - diff), 2).ToString();
                newAddValue = added;
                return true;
            }

        }

		public void StopChrome(){
			Process[] ps = Process.GetProcessesByName("chrome");
			foreach(Process p in ps){
				p.Kill();
			}
		}
	}
}
